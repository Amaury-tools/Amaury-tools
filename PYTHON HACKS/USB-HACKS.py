import os
import subprocess
import psutil
import win32api
import win32file
from termcolor import colored
from datetime import datetime
from colorama import Fore

def clear_screen():
    """Effacer l'√©cran pour Windows."""
    os.system('cls')

def execute_devcon(command):
    """Ex√©cuter une commande DevCon pour activer ou d√©sactiver un p√©riph√©rique."""
    try:
        subprocess.run(command, check=True, shell=True)
        print(colored(f"‚úÖ Commande ex√©cut√©e : {command}", 'green'))
    except subprocess.CalledProcessError as e:
        print(colored(f"‚ùå Erreur : Impossible d'ex√©cuter la commande DevCon.", 'red'))

def afficher_peripheriques():
    clear_screen()
    print(colored("\nüîå Affichage des informations des p√©riph√©riques USB...", 'cyan'))
    print(colored("="*80, 'blue'))
    
    drives = win32api.GetLogicalDriveStrings().split('\000')[:-1]  # Liste des disques
    usb_devices_found = False

    for drive in drives:
        try:
            drive_type = win32file.GetDriveType(drive)
            if drive_type == 2:  # V√©rifier si le lecteur est amovible (USB)
                usb_devices_found = True
                print(colored(f"\nüîë P√©riph√©rique USB trouv√© : {drive}", 'cyan'))
                print(colored("="*80, 'blue'))
                print(f"  Nom du p√©riph√©rique      : {drive}")
                print(f"  Point de montage         : {drive}")
                
                for partition in psutil.disk_partitions():
                    if partition.device == drive:
                        print(f"  Type de syst√®me de fichiers : {partition.fstype}")
                
                device_id = drive
                print(f"  ID du p√©riph√©rique USB   : {device_id}")
                print(f"  Statut du p√©riph√©rique   : Amovible")
                
                usage = psutil.disk_usage(drive)
                total_space = usage.total / (1024**3)
                used_space = usage.used / (1024**3)
                free_space = usage.free / (1024**3)
                
                print(f"  Capacit√© totale          : {total_space:.2f} Go")
                print(f"  Capacit√© utilis√©e        : {used_space:.2f} Go")
                print(f"  Capacit√© libre           : {free_space:.2f} Go")
                
                if total_space < 32:
                    print(colored(f"  Type : Petite cl√© USB (moins de 32 Go)", 'cyan'))
                else:
                    print(colored(f"  Type : Grande cl√© USB ou disque dur portable", 'cyan'))
                
                # V√©rification de la s√©curit√©
                try:
                    # V√©rifier si le p√©riph√©rique est prot√©g√© par BitLocker (donn√©es chiffr√©es)
                    bitlocker_status = get_bitlocker_status(drive)
                    print(f"  Statut de s√©curit√© : {bitlocker_status}")
                except Exception as e:
                    print(f"  Statut de s√©curit√© : Non disponible (Erreur lors de la r√©cup√©ration).")
                
                print("-"*80)
        except Exception as e:
            print(colored(f"‚ùå Erreur : Impossible de r√©cup√©rer le type du lecteur {drive}.", 'red'))
    
    if not usb_devices_found:
        print(colored("‚ùå Aucun p√©riph√©rique USB trouv√©.", 'red'))

    input("\nüîµ Press Enter to continue...")

def get_bitlocker_status(drive):
    """V√©rifier si un lecteur est prot√©g√© par BitLocker."""
    command = f"manage-bde -status {drive}"
    result = subprocess.run(command, capture_output=True, text=True, shell=True)
    if "Fully decrypted" in result.stdout:
        return "Non chiffr√©"
    elif "Encryption in Progress" in result.stdout:
        return "Chiffrement en cours"
    elif "Fully encrypted" in result.stdout:
        return "Chiffr√©"
    else:
        return "Statut inconnu"

def details_peripherique():
    clear_screen()
    print(colored("\nüîç D√©tails d'un p√©riph√©rique sp√©cifique...", 'cyan'))
    device_id = input("\nüîë Entrez le nom du p√©riph√©rique (ex: E:\\) : ")
    
    found = False
    devices = psutil.disk_partitions()

    for device in devices:
        if device.device == device_id:
            found = True
            print(colored(f"\nüîë D√©tails du p√©riph√©rique {device_id} :", 'cyan'))
            print(colored("="*80, 'blue'))
            print(f"  Nom du p√©riph√©rique      : {device.device}")
            print(f"  Point de montage         : {device.mountpoint}")
            print(f"  Type de syst√®me de fichiers : {device.fstype}")
            print(f"  Options                  : {device.opts}")
            
            usage = psutil.disk_usage(device.device)
            total_space = usage.total / (1024**3)
            used_space = usage.used / (1024**3)
            free_space = usage.free / (1024**3)
            
            print(f"  Capacit√© totale          : {total_space:.2f} Go")
            print(f"  Capacit√© utilis√©e        : {used_space:.2f} Go")
            print(f"  Capacit√© libre           : {free_space:.2f} Go")
            
            # Statut de s√©curit√©
            try:
                bitlocker_status = get_bitlocker_status(device.device)
                print(f"  Statut de s√©curit√© : {bitlocker_status}")
            except Exception as e:
                print(f"  Statut de s√©curit√© : Non disponible (Erreur lors de la r√©cup√©ration).")
            
            print("-"*80)
            break
    
    if not found:
        print(colored(f"‚ùå Erreur : Aucun p√©riph√©rique trouv√© avec le nom '{device_id}'.", 'red'))
    
    input("\nüîµ Press Enter to continue...")

def activer_desactiver_usb():
    clear_screen()
    print(colored("\nüîå Activation/D√©sactivation d'un p√©riph√©rique USB...", 'cyan'))
    device_id = input("üîë Entrez le nom du p√©riph√©rique (ex: E:\\) : ")
    
    action = input("‚ö° Souhaitez-vous activer ou d√©sactiver ce p√©riph√©rique ? [1: Activer, 2: D√©sactiver] : ")
    
    # V√©rifier que l'option choisie est valide
    if action not in ["1", "2"]:
        print(colored("‚ùå Erreur : Option invalide, veuillez choisir 1 ou 2.", 'red'))
        return

    # Trouver l'ID du p√©riph√©rique (doit correspondre au format du p√©riph√©rique dans DevCon)
    devcon_command = f"devcon find *{device_id}*"
    result = subprocess.run(devcon_command, capture_output=True, text=True, shell=True)
    
    if result.returncode == 0:  # Si p√©riph√©rique trouv√©
        if action == "1":
            command = f"devcon enable *{device_id}*"
            print(colored(f"‚ö° Activation du p√©riph√©rique {device_id}...", 'green'))
        elif action == "2":
            command = f"devcon disable *{device_id}*"
            print(colored(f"‚ö° D√©sactivation du p√©riph√©rique {device_id}...", 'red'))

        execute_devcon(command)
    else:
        print(colored("‚ùå Erreur : P√©riph√©rique non trouv√©.", 'red'))

    input("\nüîµ Press Enter to continue...")

def menu():
    while True:
        clear_screen()
        print(colored("="*50, 'cyan'))
        print(colored("   Menu Principal : Gestion des P√©riph√©riques USB", 'cyan'))
        print(colored("="*50, 'cyan'))
        print(Fore.CYAN + """
        ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£∑‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£Ö‚£π‚£ø‚£∑‚£Ñ‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£∑‚£Ñ‚†à‚†≥‚£Ñ‚†ô‚¢ø‚£ø‚£ø‚£è‚¢ô‚£ø‚†ó‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†ô‚¢∑‚£Ñ‚†ô‚¢ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†ô‚†≥‚£Ñ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚°à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä Made By Vaidx !
‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†ÄEducational Purposes Only ! ‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†ô‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†â‚†â‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
""")
        print("\n[1] Afficher tous les p√©riph√©riques USB")
        print("[2] D√©tails d'un p√©riph√©rique sp√©cifique")
        print("[3] Activer/D√©sactiver un p√©riph√©rique USB")
        print("[4] Quitter")
        
        choix = input("\nüîπ Choisissez une option [1-4] : ")

        if choix == "1":
            afficher_peripheriques()
        elif choix == "2":
            details_peripherique()
        elif choix == "3":
            activer_desactiver_usb()
        elif choix == "4":
            print(colored("\nüëã Script termin√©. Merci d'avoir utilis√© cet outil !", 'cyan'))
            break
        else:
            print(colored("‚ùå Erreur : Option invalide, veuillez r√©essayer !", 'red'))

if __name__ == "__main__":
    menu()

